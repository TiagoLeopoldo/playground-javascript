// üß™Desafio #4.1 ‚Äì Fundamentos? Esse aqui vai afiar ainda mais sua l√≥gica com tipos e operadores.

// üß† Enunciado:
// Crie uma fun√ß√£o chamada isEvenNumber que recebe um valor e verifica se ele √© um n√∫mero par.
// - A fun√ß√£o deve retornar uma mensagem informando se o n√∫mero √© par ou √≠mpar.
// - Deve fazer valida√ß√£o de tipo: se o valor n√£o for um n√∫mero v√°lido, retorne uma mensagem de erro.
// - Use operadores aritm√©ticos e condi√ß√£o if.

// üí° Exemplos esperados:
// isEvenNumber(4);      // "O n√∫mero 4 √© par"
// isEvenNumber(7);      // "O n√∫mero 7 √© √≠mpar"
// isEvenNumber("abc");  // "Valor inv√°lido: n√£o √© um n√∫mero"

// üìé Dicas √∫teis:
// - Use typeof pra verificar se √© n√∫mero.
// - Number.isNaN() pode ajudar se voc√™ for converter string num√©rica.
// - % (m√≥dulo) √© seu aliado pra checar paridade.

const isEvenNumber = (num) => {
  if (typeof num === "number") {
    const sentence = `O n√∫mero ${num}`;
    if (num % 2 === 0) {
      console.log(`${sentence} √© par`);
    } else {
      console.log(`${sentence} √© √≠mpar`);
    }
  } else {
    const parsedNumber = Number(num);
    if (Number.isNaN(parsedNumber)) {
      console.log("Valor inv√°lido: n√£o √© um n√∫mero.");
    } else {
      const sentence = `O n√∫mero ${parsedNumber}`;
      if (parsedNumber % 2 === 0) {
        console.log(`${sentence} √© par`);
      } else {
        console.log(`${sentence} √© √≠mpar`);
      }
    }
  }
};

isEvenNumber(4);
isEvenNumber("7");
isEvenNumber("abc");
